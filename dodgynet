#!/usr/bin/env python3

import os
import sys
import argparse
import logging
import commons
import directory
import puncher

"""
DodgyNet is a peer to peer file file sharing program that implements the 
DodgyNet protocol using the Happy Tracker and Puncher protocols to achieve
a fair and efficient file sharing. We designed the P2P system to work over
Private IP/NAT using the Puncher protocol to punch through the firewall
and/or NAT.
"""

doc_string = {
    'list' : "List the files on the directory server that are avaliable.",
    'query': "Queries the directory server for a specified file and downloads the .dodgy that contains the download information.",
    'upload': "Registers a new file with the server and start seeding.",
    'seed': "Start seeding for the .dodgy file.",
    'download': "Start downloading the file represented by the .dodgy file."
}

def valid_addr(s):
    addr = s.split(':')
    if len(addr) != 2:
        msg = "Not valid ip address and port!"
        raise argparse.ArgumentTypeError(msg)

def main(arguments):

    parser = argparse.ArgumentParser(
        description=__doc__,
        formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.add_argument('-s', '--server', help="Address of the server",
        type=str, default="127.0.0.1")
    parser.add_argument('--debug', action='store_true', 
        help='Turns debug mode on.')
    parser.add_argument('id', help="Id. for testing purposes", 
        type=int)
            
    subparsers = parser.add_subparsers(dest="action", 
        help="Action to be performed, possible actions: %s. Type -h with the action provided to see manual about the action."
        % ', '.join(doc_string.keys()), metavar='action')
        
    # Init all the parsers
    dict_subparsers = {}
    for k,v in doc_string.items():
        dict_subparsers[k] = subparsers.add_parser(k, description=v)

    dict_subparsers['query'].add_argument('file', help="File to query from the directory server.", 
        type=str)
    dict_subparsers['query'].add_argument('-o', '--out', help="Saves the queried .dodgy file to this path, defaults to {file}.dodgy", 
        default=None, type=argparse.FileType('wb'))

    dict_subparsers['upload'].add_argument('file', help="File to be uploaded to the directory server.", 
        type=argparse.FileType('rb'))
    dict_subparsers['upload'].add_argument('description', help="Short description of the file.", 
        type=str)

    dict_subparsers['seed'].add_argument('dodgy_file', help=".dodgy file to start seeding from.", 
        type=argparse.FileType('rb'))
    dict_subparsers['seed'].add_argument('file', help="Specific location of file corresponding to the .dodgy file to seed.", 
        type=argparse.FileType('rb'))

    dict_subparsers['download'].add_argument('dodgy_file', help=".dodgy file to start downloading from.", 
        type=argparse.FileType('rb'))
    dict_subparsers['download'].add_argument('-c', '--cache', help="Folder to use as cache.", 
        default="cache", type=str)
    dict_subparsers['download'].add_argument('-o', '--out', help="Saves the downloaded file to this location.", 
        default=None, type=argparse.FileType('wb'))

    args = parser.parse_args(arguments)

    if args.debug == True:
        logging.basicConfig(level=logging.DEBUG, format=commons.logger_debug_format)
    else:
        logging.basicConfig(level=logging.INFO, format=commons.logger_consumer_format)
    logging.debug(args)
    action = args.action
    if action == "list":
        logging.debug("Listing files from the server.")
        dir_client = directory.DirClient((args.server, directory.PORT))
        dir_client.list()
        dir_client.bye()
    elif action == "query":
        logging.debug("Query server and download dodgy file.")
        dir_client = directory.DirClient((args.server, directory.PORT))
        dir_client.query(args.file, args.out)
        dir_client.bye()
    elif action == "upload" or action == "seeder":
        if action == "upload":
            logging.debug("Uploading new file to server and start seeding.")
            dir_client = directory.DirClient((args.server, directory.PORT))
            dir_client.register(args.file, args.description)
            dir_client.bye()
        
        # Now start seeding
        logging.debug("Start seeding.")
    else:
        print("TEST-stubbed")
        puncher_client = puncher.PuncherClient(args.id, puncher.PuncherPacket, (args.server, puncher.PORT))
        puncher_client.join()
        target_id = int(input("Enter a target:"))
        while target_id != 0:
            c = puncher_client.connect_cached(target_id)
            c.send(puncher.PuncherPacket())
            print(c.recv())
            target_id = int(input("Enter a target:"))
        puncher_client.bye()

if __name__ == '__main__':
    sys.exit(main(sys.argv[1:]))

# vim: expandtab shiftwidth=4 softtabstop=4 textwidth=80:
