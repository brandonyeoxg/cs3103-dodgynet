#!/usr/bin/env python3

import os
import sys
import argparse
import logging
import directory
import commons
import pickle
import logging

"""
DodgyNet-Server is a peer to peer file file sharing daemon that implements the 
DodgyNet protocol using the Happy Tracker and Puncher protocols to achieve
a fair and efficient file sharing. We designed the P2P system to work over
Private IP/NAT using the Puncher protocol to punch through the firewall
and/or NAT.
"""

#https://stackoverflow.com/questions/12757884/python-multi-socketserver-work-in-same-time
class Server(object):
    def __init__(self, state_file):
        self.state_file = state_file
        try:
            state = pickle.load(open(state_file, "rb"))
            logging.debug("Loaded state file %s" % state_file)
            self.dir_server = directory.DirServer(state['dir'])
        except (OSError, IOError) as e:
            logging.debug("No state file, starting afresh.")
            self.dir_server = directory.DirServer([p])
    def serve_forever(self):
        self.dir_server.serve_forever()
    def shutdown(self):
        self.dir_server.shutdown()
    def save_state(self):
        state = {}
        state['dir'] = self.dir_server.get_state()
        pickle.dump(state, open(self.state_file, "wb"))

possible_servers = ["all", "directory", "tracker", "puncher"]

def main(arguments):

    logging.basicConfig(level=logging.DEBUG, format=commons.logger_format)

    parser = argparse.ArgumentParser(
        description=__doc__,
        formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.add_argument('server', help="Server to start, possible servers: %s" 
            % ', '.join(possible_servers), 
            type=str, choices=possible_servers, metavar='server', default='all',
            const='all', nargs='?')
    parser.add_argument('-sf', '--state_file', help="State file of the server"
            ", retrieve and save to.", default="server.state", type=str)

    args = parser.parse_args(arguments)

    print(commons.ascii_art_logo)
    logging.info("Welcome! Starting DodgyNet Server...")
    logging.debug("Starting server(s) with arguments %s" % str(args))

    server = Server(args.state_file)
    try:
        server.serve_forever()
    except KeyboardInterrupt:
        pass
    server.shutdown()
    server.save_state()

if __name__ == "__main__":
    sys.exit(main(sys.argv[1:]))

# vim: expandtab shiftwidth=4 softtabstop=4 textwidth=80:
